// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refreshtoken.sql

package db

import (
	"context"
)

const deleteUsedRefreshToken = `-- name: DeleteUsedRefreshToken :exec
DELETE FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) DeleteUsedRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, deleteUsedRefreshToken, refreshToken)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT refresh_token FROM sessions
WHERE refresh_token = $1
LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, refreshToken string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, refreshToken)
	var refresh_token string
	err := row.Scan(&refresh_token)
	return refresh_token, err
}

const saveNewRefreshToken = `-- name: SaveNewRefreshToken :one
INSERT INTO sessions (
    username, 
    refresh_token 
    ) VALUES (
        $1,$2
    ) RETURNING id, username, refresh_token
`

type SaveNewRefreshTokenParams struct {
	Username     string `json:"username"`
	RefreshToken string `json:"refresh_token"`
}

func (q *Queries) SaveNewRefreshToken(ctx context.Context, arg SaveNewRefreshTokenParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, saveNewRefreshToken, arg.Username, arg.RefreshToken)
	var i Session
	err := row.Scan(&i.ID, &i.Username, &i.RefreshToken)
	return i, err
}
